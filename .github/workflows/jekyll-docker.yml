
name: Build and Deploy Jekyll with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Setter permissions for GitHub token for å kunne skrive til gh-pages branch
permissions:
  contents: read
  pages: write
  id-token: write

# Tillater kun én concurrent deployment, og avbryter pågående runs ved nye pushes
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Henter full git history for bedre caching

    - name: Setup Ruby (for dependency caching)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: false  # Vi bruker Docker, så vi trenger ikke Ruby caching

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Cache Jekyll dependencies
      uses: actions/cache@v3
      with:
        path: |
          vendor/bundle
          .jekyll-cache
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Build Jekyll site with Docker
      run: |
        docker run \
          --rm \
          -v ${{ github.workspace }}:/srv/jekyll \
          -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
          -v ${{ github.workspace }}/vendor/bundle:/usr/local/bundle \
          -e JEKYLL_ENV=production \
          jekyll/builder:4.2.2 \
          /bin/bash -c "
            chmod -R 777 /srv/jekyll && 
            bundle install --path /usr/local/bundle && 
            bundle exec jekyll build --future --verbose --destination /srv/jekyll/_site
          "

    - name: Test built site
      run: |
        if [ ! -f "_site/index.html" ]; then
          echo "Error: index.html not found in _site directory"
          exit 1
        fi
        echo "Site built successfully. Files in _site:"
        ls -la _site/

    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site/

  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
