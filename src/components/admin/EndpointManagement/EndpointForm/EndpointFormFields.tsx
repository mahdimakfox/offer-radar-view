
import React from 'react';
import { UseFormReturn } from 'react-hook-form';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { RefreshCw, Wand2 } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface EndpointFormFieldsProps {
  form: UseFormReturn<any>;
  isEditing: boolean;
}

const EndpointFormFields = ({ form, isEditing }: EndpointFormFieldsProps) => {
  const { toast } = useToast();
  const [generatingUrl, setGeneratingUrl] = React.useState(false);

  const categories = ['strom', 'forsikring', 'bank', 'mobil', 'internett', 'boligalarm'];

  const generateUrl = async () => {
    const providerName = form.getValues('provider_name');
    const category = form.getValues('category');
    
    if (!providerName || !category) {
      toast({
        title: "Missing information",
        description: "Please enter provider name and select category first",
        variant: "destructive"
      });
      return;
    }

    setGeneratingUrl(true);
    try {
      const { data, error } = await supabase.rpc('generate_provider_url', {
        provider_name: providerName,
        category: category
      });

      if (error) throw error;

      form.setValue('url', data);
      form.setValue('auto_generated_url', true);
      
      toast({
        title: "URL generated",
        description: "Provider URL has been automatically generated"
      });
    } catch (error) {
      console.error('URL generation error:', error);
      toast({
        title: "Generation failed",
        description: "Could not generate URL automatically",
        variant: "destructive"
      });
    } finally {
      setGeneratingUrl(false);
    }
  };

  const endpointType = form.watch('endpoint_type');
  const autoGeneratedUrl = form.watch('auto_generated_url');

  return (
    <div className="space-y-6">
      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle>Basic Information</CardTitle>
          <CardDescription>Configure the endpoint's core details</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Endpoint Name</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Hafslund StrÃ¸m API" {...field} />
                </FormControl>
                <FormDescription>A descriptive name for this endpoint</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="provider_name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Provider Name</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Hafslund" {...field} />
                </FormControl>
                <FormDescription>The name of the provider (used for URL generation)</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="category"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Category</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {categories.map(cat => (
                      <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="endpoint_type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Endpoint Type</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select endpoint type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="api">API</SelectItem>
                    <SelectItem value="scraping">Web Scraping</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="priority"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Priority</FormLabel>
                <FormControl>
                  <Input 
                    type="number" 
                    placeholder="1" 
                    {...field}
                    onChange={e => field.onChange(parseInt(e.target.value) || 1)}
                  />
                </FormControl>
                <FormDescription>Lower numbers = higher priority (1 = highest)</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="is_active"
            render={({ field }) => (
              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                <div className="space-y-0.5">
                  <FormLabel className="text-base">Active</FormLabel>
                  <FormDescription>Whether this endpoint is active and available for use</FormDescription>
                </div>
                <FormControl>
                  <Switch checked={field.value} onCheckedChange={field.onChange} />
                </FormControl>
              </FormItem>
            )}
          />
        </CardContent>
      </Card>

      {/* URL Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>URL Configuration</CardTitle>
          <CardDescription>Set up the endpoint URL</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Button
              type="button"
              onClick={generateUrl}
              disabled={generatingUrl}
              variant="outline"
              size="sm"
            >
              <Wand2 className="w-4 h-4 mr-2" />
              {generatingUrl ? 'Generating...' : 'Auto-generate URL'}
            </Button>
            {autoGeneratedUrl && (
              <Badge variant="secondary">Auto-generated</Badge>
            )}
          </div>

          <FormField
            control={form.control}
            name="url"
            render={({ field }) => (
              <FormItem>
                <FormLabel>URL</FormLabel>
                <FormControl>
                  <Input placeholder="https://api.example.com/providers" {...field} />
                </FormControl>
                <FormDescription>
                  The endpoint URL. Use the auto-generate button for common Norwegian providers.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="auto_generated_url"
            render={({ field }) => (
              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                <div className="space-y-0.5">
                  <FormLabel className="text-base">Auto-generated URL</FormLabel>
                  <FormDescription>Whether this URL was automatically generated</FormDescription>
                </div>
                <FormControl>
                  <Switch checked={field.value} onCheckedChange={field.onChange} />
                </FormControl>
              </FormItem>
            )}
          />
        </CardContent>
      </Card>

      {/* Authentication Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>Authentication</CardTitle>
          <CardDescription>Configure authentication requirements</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <FormField
            control={form.control}
            name="auth_required"
            render={({ field }) => (
              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                <div className="space-y-0.5">
                  <FormLabel className="text-base">Requires Authentication</FormLabel>
                  <FormDescription>Whether this endpoint requires authentication</FormDescription>
                </div>
                <FormControl>
                  <Switch checked={field.value} onCheckedChange={field.onChange} />
                </FormControl>
              </FormItem>
            )}
          />

          {form.watch('auth_required') && (
            <FormField
              control={form.control}
              name="auth_config"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Authentication Configuration</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder='{"type": "bearer", "token": "your-token"}'
                      className="font-mono"
                      {...field}
                      value={typeof field.value === 'string' ? field.value : JSON.stringify(field.value || {}, null, 2)}
                      onChange={e => {
                        try {
                          const parsed = JSON.parse(e.target.value);
                          field.onChange(parsed);
                        } catch {
                          field.onChange(e.target.value);
                        }
                      }}
                    />
                  </FormControl>
                  <FormDescription>JSON configuration for authentication</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
        </CardContent>
      </Card>

      {/* Type-specific Configuration */}
      {endpointType === 'scraping' && (
        <Card>
          <CardHeader>
            <CardTitle>Scraping Configuration</CardTitle>
            <CardDescription>Configure web scraping and Playwright settings</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <FormField
              control={form.control}
              name="scraping_config"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Scraping Configuration</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder='{"selectors": {"name": ".provider-name", "price": ".price"}, "waitForSelector": ".content"}'
                      className="font-mono"
                      rows={6}
                      {...field}
                      value={typeof field.value === 'string' ? field.value : JSON.stringify(field.value || {}, null, 2)}
                      onChange={e => {
                        try {
                          const parsed = JSON.parse(e.target.value);
                          field.onChange(parsed);
                        } catch {
                          field.onChange(e.target.value);
                        }
                      }}
                    />
                  </FormControl>
                  <FormDescription>
                    JSON configuration for CSS selectors and scraping rules
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="playwright_config"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Playwright Configuration</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder='{"viewport": {"width": 1280, "height": 720}, "userAgent": "custom-agent", "timeout": 30000}'
                      className="font-mono"
                      rows={4}
                      {...field}
                      value={typeof field.value === 'string' ? field.value : JSON.stringify(field.value || {}, null, 2)}
                      onChange={e => {
                        try {
                          const parsed = JSON.parse(e.target.value);
                          field.onChange(parsed);
                        } catch {
                          field.onChange(e.target.value);
                        }
                      }}
                    />
                  </FormControl>
                  <FormDescription>
                    JSON configuration for Playwright browser settings (optional)
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default EndpointFormFields;
